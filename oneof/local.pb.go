// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oneof/local.proto

/*
Package oneof is a generated protocol buffer package.

It is generated from these files:
	oneof/local.proto

It has these top-level messages:
	Foo
	Bar
	Baz
	Union
	OneOf
*/
package oneof

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Union_Type int32

const (
	Union_FOO Union_Type = 0
	Union_BAR Union_Type = 1
	Union_BAZ Union_Type = 2
)

var Union_Type_name = map[int32]string{
	0: "FOO",
	1: "BAR",
	2: "BAZ",
}
var Union_Type_value = map[string]int32{
	"FOO": 0,
	"BAR": 1,
	"BAZ": 2,
}

func (Union_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorLocal, []int{3, 0} }

type Foo struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=Age,proto3" json:"Age,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{0} }

func (m *Foo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Foo) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type Bar struct {
	Data  []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Error bool   `protobuf:"varint,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{1} }

func (m *Bar) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Bar) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

type Baz struct {
	X    int32  `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y    int32  `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z    int32  `protobuf:"varint,3,opt,name=Z,proto3" json:"Z,omitempty"`
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *Baz) Reset()                    { *m = Baz{} }
func (*Baz) ProtoMessage()               {}
func (*Baz) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{2} }

func (m *Baz) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Baz) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Baz) GetZ() int32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Baz) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Union struct {
	// Identifies which field is filled in.
	Type Union_Type `protobuf:"varint,1,opt,name=type,proto3,enum=oneof.Union_Type" json:"type,omitempty"`
	// One of the following will be filled in.
	Foo *Foo `protobuf:"bytes,2,opt,name=foo" json:"foo,omitempty"`
	Bar *Bar `protobuf:"bytes,3,opt,name=bar" json:"bar,omitempty"`
	Baz *Baz `protobuf:"bytes,4,opt,name=baz" json:"baz,omitempty"`
}

func (m *Union) Reset()                    { *m = Union{} }
func (*Union) ProtoMessage()               {}
func (*Union) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{3} }

func (m *Union) GetType() Union_Type {
	if m != nil {
		return m.Type
	}
	return Union_FOO
}

func (m *Union) GetFoo() *Foo {
	if m != nil {
		return m.Foo
	}
	return nil
}

func (m *Union) GetBar() *Bar {
	if m != nil {
		return m.Bar
	}
	return nil
}

func (m *Union) GetBaz() *Baz {
	if m != nil {
		return m.Baz
	}
	return nil
}

type OneOf struct {
	Signature []byte `protobuf:"bytes,1,opt,name=Signature,proto3" json:"Signature,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*OneOf_Foo
	//	*OneOf_Bar
	//	*OneOf_Baz
	Data isOneOf_Data `protobuf_oneof:"Data"`
}

func (m *OneOf) Reset()                    { *m = OneOf{} }
func (*OneOf) ProtoMessage()               {}
func (*OneOf) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{4} }

type isOneOf_Data interface {
	isOneOf_Data()
	Equal(interface{}) bool
	Size() int
}

type OneOf_Foo struct {
	Foo *Foo `protobuf:"bytes,2,opt,name=foo,oneof"`
}
type OneOf_Bar struct {
	Bar *Bar `protobuf:"bytes,3,opt,name=bar,oneof"`
}
type OneOf_Baz struct {
	Baz *Baz `protobuf:"bytes,4,opt,name=baz,oneof"`
}

func (*OneOf_Foo) isOneOf_Data() {}
func (*OneOf_Bar) isOneOf_Data() {}
func (*OneOf_Baz) isOneOf_Data() {}

func (m *OneOf) GetData() isOneOf_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OneOf) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OneOf) GetFoo() *Foo {
	if x, ok := m.GetData().(*OneOf_Foo); ok {
		return x.Foo
	}
	return nil
}

func (m *OneOf) GetBar() *Bar {
	if x, ok := m.GetData().(*OneOf_Bar); ok {
		return x.Bar
	}
	return nil
}

func (m *OneOf) GetBaz() *Baz {
	if x, ok := m.GetData().(*OneOf_Baz); ok {
		return x.Baz
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OneOf) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OneOf_OneofMarshaler, _OneOf_OneofUnmarshaler, _OneOf_OneofSizer, []interface{}{
		(*OneOf_Foo)(nil),
		(*OneOf_Bar)(nil),
		(*OneOf_Baz)(nil),
	}
}

func _OneOf_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OneOf)
	// Data
	switch x := m.Data.(type) {
	case *OneOf_Foo:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Foo); err != nil {
			return err
		}
	case *OneOf_Bar:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bar); err != nil {
			return err
		}
	case *OneOf_Baz:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Baz); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OneOf.Data has unexpected type %T", x)
	}
	return nil
}

func _OneOf_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OneOf)
	switch tag {
	case 2: // Data.foo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Foo)
		err := b.DecodeMessage(msg)
		m.Data = &OneOf_Foo{msg}
		return true, err
	case 3: // Data.bar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Bar)
		err := b.DecodeMessage(msg)
		m.Data = &OneOf_Bar{msg}
		return true, err
	case 4: // Data.baz
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Baz)
		err := b.DecodeMessage(msg)
		m.Data = &OneOf_Baz{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OneOf_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OneOf)
	// Data
	switch x := m.Data.(type) {
	case *OneOf_Foo:
		s := proto.Size(x.Foo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_Bar:
		s := proto.Size(x.Bar)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_Baz:
		s := proto.Size(x.Baz)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Foo)(nil), "oneof.Foo")
	proto.RegisterType((*Bar)(nil), "oneof.Bar")
	proto.RegisterType((*Baz)(nil), "oneof.Baz")
	proto.RegisterType((*Union)(nil), "oneof.Union")
	proto.RegisterType((*OneOf)(nil), "oneof.OneOf")
	proto.RegisterEnum("oneof.Union_Type", Union_Type_name, Union_Type_value)
}
func (x Union_Type) String() string {
	s, ok := Union_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Foo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Foo)
	if !ok {
		that2, ok := that.(Foo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	return true
}
func (this *Bar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Bar)
	if !ok {
		that2, ok := that.(Bar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Baz) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Baz)
	if !ok {
		that2, ok := that.(Baz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Z != that1.Z {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Union) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Union)
	if !ok {
		that2, ok := that.(Union)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Foo.Equal(that1.Foo) {
		return false
	}
	if !this.Bar.Equal(that1.Bar) {
		return false
	}
	if !this.Baz.Equal(that1.Baz) {
		return false
	}
	return true
}
func (this *OneOf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneOf)
	if !ok {
		that2, ok := that.(OneOf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *OneOf_Foo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneOf_Foo)
	if !ok {
		that2, ok := that.(OneOf_Foo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Foo.Equal(that1.Foo) {
		return false
	}
	return true
}
func (this *OneOf_Bar) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneOf_Bar)
	if !ok {
		that2, ok := that.(OneOf_Bar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Bar.Equal(that1.Bar) {
		return false
	}
	return true
}
func (this *OneOf_Baz) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneOf_Baz)
	if !ok {
		that2, ok := that.(OneOf_Baz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Baz.Equal(that1.Baz) {
		return false
	}
	return true
}
func (m *Foo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovLocal(uint64(m.Age))
	}
	return n
}

func (m *Bar) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Error {
		n += 2
	}
	return n
}

func (m *Baz) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovLocal(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovLocal(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sovLocal(uint64(m.Z))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}

func (m *Union) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLocal(uint64(m.Type))
	}
	if m.Foo != nil {
		l = m.Foo.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Bar != nil {
		l = m.Bar.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Baz != nil {
		l = m.Baz.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}

func (m *OneOf) Size() (n int) {
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *OneOf_Foo) Size() (n int) {
	var l int
	_ = l
	if m.Foo != nil {
		l = m.Foo.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}
func (m *OneOf_Bar) Size() (n int) {
	var l int
	_ = l
	if m.Bar != nil {
		l = m.Bar.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}
func (m *OneOf_Baz) Size() (n int) {
	var l int
	_ = l
	if m.Baz != nil {
		l = m.Baz.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}

func sovLocal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLocal(x uint64) (n int) {
	return sovLocal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Foo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Foo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bar{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Baz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Baz{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Z:` + fmt.Sprintf("%v", this.Z) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Union) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Union{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Foo:` + strings.Replace(fmt.Sprintf("%v", this.Foo), "Foo", "Foo", 1) + `,`,
		`Bar:` + strings.Replace(fmt.Sprintf("%v", this.Bar), "Bar", "Bar", 1) + `,`,
		`Baz:` + strings.Replace(fmt.Sprintf("%v", this.Baz), "Baz", "Baz", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OneOf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OneOf{`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OneOf_Foo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OneOf_Foo{`,
		`Foo:` + strings.Replace(fmt.Sprintf("%v", this.Foo), "Foo", "Foo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OneOf_Bar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OneOf_Bar{`,
		`Bar:` + strings.Replace(fmt.Sprintf("%v", this.Bar), "Bar", "Bar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OneOf_Baz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OneOf_Baz{`,
		`Baz:` + strings.Replace(fmt.Sprintf("%v", this.Baz), "Baz", "Baz", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLocal(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("oneof/local.proto", fileDescriptorLocal) }

var fileDescriptorLocal = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x33, 0x4d, 0xd2, 0x7b, 0x3b, 0xb7, 0x5c, 0xd2, 0xe1, 0x2e, 0xc2, 0xa5, 0x0c, 0xbd,
	0x81, 0x0b, 0x05, 0x31, 0x81, 0xfa, 0x04, 0x8d, 0x5a, 0x5c, 0x19, 0x18, 0x15, 0xda, 0xee, 0x26,
	0x25, 0x89, 0x85, 0x36, 0xa7, 0x0c, 0xe9, 0xa2, 0x59, 0xf9, 0x02, 0xbe, 0x87, 0xe0, 0x0b, 0xb9,
	0xd4, 0xac, 0x5c, 0xfa, 0x08, 0x32, 0x67, 0x8a, 0x75, 0xd3, 0xdd, 0xff, 0x9f, 0xef, 0x9f, 0x9c,
	0x3f, 0xc9, 0xd0, 0x1e, 0x94, 0x19, 0xe4, 0xd1, 0x0a, 0x16, 0x72, 0x15, 0x6e, 0x14, 0x54, 0xc0,
	0x5c, 0x1c, 0xfd, 0x3d, 0x2d, 0x96, 0xd5, 0xfd, 0x36, 0x0d, 0x17, 0xb0, 0x8e, 0x0a, 0x28, 0x20,
	0x42, 0x9a, 0x6e, 0x73, 0x74, 0x68, 0x50, 0x99, 0x53, 0xc1, 0x09, 0xb5, 0x27, 0x00, 0x8c, 0x51,
	0xe7, 0x5a, 0xae, 0x33, 0x9f, 0x0c, 0xc8, 0xb0, 0x23, 0x50, 0x33, 0x8f, 0xda, 0xe3, 0x22, 0xf3,
	0x5b, 0x03, 0x32, 0x74, 0x85, 0x96, 0x41, 0x44, 0xed, 0x58, 0x2a, 0x1d, 0xbe, 0x90, 0x95, 0xc4,
	0x70, 0x57, 0xa0, 0x66, 0x7f, 0xa8, 0x7b, 0xa9, 0x14, 0x28, 0x8c, 0xff, 0x14, 0xc6, 0x04, 0xe7,
	0xfa, 0x40, 0xcd, 0xba, 0x94, 0x4c, 0x31, 0xed, 0x0a, 0x32, 0xd5, 0x6e, 0xb6, 0x7f, 0x2a, 0x99,
	0x69, 0x37, 0xf7, 0x6d, 0xe3, 0xe6, 0x5f, 0x3d, 0x9c, 0x43, 0x8f, 0xe0, 0x99, 0x50, 0xf7, 0xae,
	0x5c, 0x42, 0xc9, 0xfe, 0x53, 0xa7, 0xda, 0x6d, 0x4c, 0xcb, 0xdf, 0xa3, 0x5e, 0x88, 0x6f, 0x1c,
	0x22, 0x0b, 0x6f, 0x77, 0x9b, 0x4c, 0x20, 0x66, 0x7d, 0x6a, 0xe7, 0x00, 0xb8, 0xe2, 0xd7, 0x88,
	0xee, 0x53, 0x13, 0x00, 0xa1, 0xc7, 0x9a, 0xa6, 0x52, 0xe1, 0xca, 0x03, 0x8d, 0xa5, 0x12, 0x7a,
	0x6c, 0x68, 0x8d, 0xfb, 0xbf, 0xd3, 0x5a, 0xd3, 0x3a, 0xf8, 0x47, 0x1d, 0xbd, 0x87, 0xfd, 0xa0,
	0xf6, 0x24, 0x49, 0x3c, 0x4b, 0x8b, 0x78, 0x2c, 0x3c, 0x62, 0xc4, 0xdc, 0x6b, 0x05, 0x8f, 0x84,
	0xba, 0x49, 0x99, 0x25, 0x39, 0xeb, 0xd3, 0xce, 0xcd, 0xb2, 0x28, 0x65, 0xb5, 0x55, 0xd9, 0xfe,
	0x5b, 0x1d, 0x06, 0x8c, 0x1f, 0x29, 0x79, 0x65, 0x99, 0x9a, 0xfc, 0x48, 0x4d, 0xcd, 0x75, 0x51,
	0x7e, 0xa4, 0xa8, 0xe1, 0x75, 0xdc, 0x36, 0x3f, 0x29, 0xf6, 0x5f, 0xde, 0xb8, 0xf5, 0xd0, 0x70,
	0xf2, 0xd4, 0x70, 0xf2, 0xda, 0x70, 0xf2, 0xde, 0x70, 0xeb, 0xa3, 0xe1, 0x24, 0x6d, 0xe3, 0x0d,
	0x38, 0xfb, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xb8, 0xaa, 0xc5, 0x4c, 0x02, 0x00, 0x00,
}
